from aiogram.types import CallbackQuery

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboards.inline_kb import get_pagination_keyboard

# —Å–µ—Ä–≤–∏—Å—ã
from services.api_services.seeonline_api import SeeOnlineAPI

# –¥–æ–ø.
import json
import math

# –∫–æ–Ω—Ñ–∏–≥
from config import redis_cache, load_config

config = load_config()

# —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫–æ—Å—Ç—ã–ª—å —Ç–∫ –¥–µ–ª–∞–ª —á–µ—Ä–µ–∑ –≥–ø—Ç
# todo –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å, –≥–ø—Ç
async def show_monitor_accounts_page(
        callback: CallbackQuery,
        page: int,
        page_size: int,
        ttl: int,
        edit: bool = False
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞—è –∏–ª–∏ –±–µ—Ä—è –∏–∑ Redis.
    –ï—Å–ª–∏ Redis –Ω–µ –∏–º–µ–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å –≤ API.
    """
    user_id = callback.from_user.id
    redis_key = f"monitor_accounts:{user_id}"

    # –ü—ã—Ç–∞–µ–º—Å—è —Å—á–∏—Ç–∞—Ç—å –∫—ç—à –∏–∑ Redis
    data = await redis_cache.get(redis_key)
    if data:
        try:
            monitor_accounts = json.loads(data)
        except json.JSONDecodeError:
            monitor_accounts = None
    else:
        monitor_accounts = None

    if not monitor_accounts:
        # –î–∞–Ω–Ω—ã—Ö –≤ Redis –Ω–µ—Ç –ª–∏–±–æ –æ–Ω–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã ‚Äî –≥—Ä—É–∑–∏–º –∏–∑ API
        api = SeeOnlineAPI(config.SEEONLINE_API_URL)
        monitor_accounts = await api.get_monitor_account()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å TTL
        await redis_cache.set(redis_key, json.dumps(monitor_accounts), ex=ttl)

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—É—Å—Ç
    if not monitor_accounts:
        text = "üì≠ –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç."
        if edit:
            await callback.message.edit_text(text)
        else:
            await callback.message.answer(text)
        return await callback.answer()

    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
    total_items = len(monitor_accounts)
    total_pages = math.ceil(total_items / page_size)

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º page, –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    # –ë–µ—Ä—ë–º –Ω—É–∂–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    current_page_items = monitor_accounts[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üìã <b>–°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b> "
        f"(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    )
    for account in current_page_items:
        text += (
            f"üîπ <b>ID:</b> {account['id']}\n"
            f"üë§ <b>User ID:</b> <code>{account['user_id']}</code>\n"
            f"üÜî <b>API ID:</b> <code>{account['api_id']}</code>\n"
            f"üîë <b>API Hash:</b> <code>{account['api_hash']}</code>\n"
            f"‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if account['is_active'] else '–ù–µ—Ç'}\n"
            f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</b> {'–î–∞' if account['is_auth'] else '–ù–µ—Ç'}\n"
            f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {account['created_at']}\n"
            f"üîÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω:</b> {account['updates_at']}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_kb = get_pagination_keyboard(page, total_pages)

    if edit:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text, reply_markup=pagination_kb, parse_mode="HTML")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text, reply_markup=pagination_kb, parse_mode="HTML")

    await callback.answer()
