from aiogram import Router
from aiogram.types import Message

import re

# —Ñ–∏–ª—å—Ç—Ä—ã
from aiogram.filters import Command
from aiogram import F

# —Å–æ—Å—Ç–æ—è–Ω–∏—è
from aiogram.fsm.context import FSMContext
from states import (
    GetMonitorAccountByUserID,
    GetMonitorAccountByPK,
    AddMonitorAccount,
    EditMonitorAccountByPK,
    EditMonitorAccountByUserID,
    DeleteMonitorAccountByPK,
    DeleteMonitorAccountByUserID,
    AuthMonitorAccountByPK,
)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboards.reply_kb import (
    get_admin_panel_keyboard
)
from keyboards.inline_kb import (
    MonitorAccountsKeyboard,
    MonitorSettingsKeyboard,
    MonitoredAccountsKeyboard,
    AdditionalFunctionsKeyboard
)

# —Å–µ—Ä–≤–∏—Å—ã
from services.api_services.seeonline_api import SeeOnlineAPI

# –∫–æ–Ω—Ñ–∏–≥
from config import load_config

config = load_config()

router = Router()


# ----------------COMMANDS----------------

@router.message(Command('admin'))
async def cmd_admin(message: Message):
    formatted_message = (
        "üõ† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>\n\n"
        "‚ö° –¢—É—Ç —Ç—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø—Ä–æ–≤–µ–¥–µ—à—å –≤—Å—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –∂–∏–∑–Ω—å.\n\n"
        "üéõ <b>–†–∞–±–æ—Ç–∞–µ–º —Å –∫–Ω–æ–ø–æ—á–∫–∞–º–∏</b>\n\n"
        "‚ö†Ô∏è <b>–ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —á–∏—Ç–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:</b>\n/admin_docs\n"
        "üíª <b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏:</b>\n/admin_commands"
    )

    await message.answer(formatted_message, parse_mode="HTML", reply_markup=get_admin_panel_keyboard())


@router.message(Command('admin_commands'))
async def cmd_admin_commands(message: Message):
    formatted_message = (
        "‚ö° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"

        "üë®‚Äçüíª <b>–§—É–Ω–∫—Ü–∏–∏ —Ä—è–¥–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"

        "‚Äçüíª <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–∞–∫–∫–∞—É–Ω—Ç—ã</b>\n"
        "üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ - /get_monitors\n"
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–∞–∫–∫–∞—É–Ω—Ç–∞ - /set_monitor\n"
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–∞–∫–∫–∞—É–Ω—Ç–∞ - /edit_monitor\n"
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–∞–∫–∫–∞—É–Ω—Ç–∞ - /delete_monitor\n\n"

        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
        "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - /get_monitor_settings\n"
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - /set_monitor_settings\n"
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - /edit_monitor_settings\n"
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - /delete_monitor_settings\n\n"

        "üìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</b>\n"
        "üëÄ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - /get_monitored_accounts\n"
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - /set_monitored_accounts\n"
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - /edit_monitored_accounts\n"
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - /delete_monitored_account\n"
        "‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ–Ω–ª–∞–π–Ω–∞ - /get_online_period\n"
        "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–∞–∫–∫–∞—É–Ω—Ç–∞ - /auth_monitor\n\n"

        "üëë <b>–§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–∏—Ö –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"

        "üõ† <b>String —Å–µ—Å—Å–∏–∏:</b>\n"
        "üîì –ü–æ–ª—É—á–µ–Ω–∏–µ session_string - /get_session_string\n"
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ session_string - /set_session_string\n"
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ session_string - /edit_session_string\n"
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ session_string - /delete_session_string\n\n"

        "üìú <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        "üìñ –ö—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∫–æ–º–∞–Ω–¥ ‚Äî /admin_commands_docs"
    )

    await message.answer(formatted_message, parse_mode="HTML")


# ----------------TEXT----------------

@router.message(F.text == "üì° –ú–æ–Ω–∏—Ç–æ—Ä-–∞–∫–∫–∞—É–Ω—Ç—ã")
async def monitor_accounts_menu(message: Message):
    formatted_message = (
        "üì° <b>–ú–æ–Ω–∏—Ç–æ—Ä-–∞–∫–∫–∞—É–Ω—Ç—ã</b>\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "üîπ –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä-–∞–∫–∫–∞—É–Ω—Ç—ã\n"
        "üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "üîπ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–Ω–∏—Ç–æ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "üîπ –£–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        "üîπ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã\n\n"
        "‚ö†Ô∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ\n\n"
        "‚öôÔ∏è –ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ø—É —Ä–≤–∞—Ç—å —Ç–æ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n /admin_commands"
    )

    await message.answer(formatted_message, parse_mode="HTML")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=MonitorAccountsKeyboard.get_keyboard('main'))


@router.message(F.text == "üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
async def monitored_accounts_menu(message: Message):
    formatted_message = (
        "üëÄ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</b>\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "üîπ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        "üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
        "üîπ –ò–∑–º–µ–Ω—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "üîπ –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
        "‚ö†Ô∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ\n\n"
        "‚öôÔ∏è –ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ø—É —Ä–≤–∞—Ç—å —Ç–æ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n /admin_commands"
    )

    await message.answer(formatted_message, parse_mode="HTML")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=MonitoredAccountsKeyboard.get_keyboard('main'))


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤")
async def monitor_settings_menu(message: Message):
    formatted_message = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä-–∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "üîπ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "üîπ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üîπ –£–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "‚ö†Ô∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ\n\n"
        "‚öôÔ∏è –ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ø—É —Ä–≤–∞—Ç—å —Ç–æ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n /admin_commands"
    )

    await message.answer(formatted_message, parse_mode="HTML")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=MonitorSettingsKeyboard.get_keyboard('main'))


@router.message(F.text == "üõ† –î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏")
async def additional_functions_menu(message: Message):
    formatted_message = (
        "üõ† <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "üîπ –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏\n"
        "‚ö†Ô∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ\n\n"
        "‚öôÔ∏è –ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ø—É —Ä–≤–∞—Ç—å —Ç–æ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n /admin_commands"
    )
    await message.answer(formatted_message, parse_mode="HTML")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=AdditionalFunctionsKeyboard.get_keyboard('main'))


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def additional_functions_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_panel_keyboard())


# ----------------STATES----------------
# ------------Monitor Accounts------------
# --------GET--------
@router.message(GetMonitorAccountByPK.waiting_for_pk)
async def process_get_monitor_account_by_pk(message: Message, state: FSMContext):
    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    try:
        pk = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
        return

    try:
        account = await api.get_monitor_account(pk=pk)
    except ValueError:
        await message.answer("üì≠ –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    response = (
        f"üîπ <b>ID:</b> {account['id']}\n"
        f"üë§ <b>User ID:</b> <code>{account['user_id']}</code>\n"
        f"üÜî <b>API ID:</b> <code>{account['api_id']}</code>\n"
        f"üîë <b>API Hash:</b> <code>{account['api_hash']}</code>\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if account['is_active'] else '–ù–µ—Ç'}\n"
        f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</b> {'–î–∞' if account['is_auth'] else '–ù–µ—Ç'}\n"
        f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {account['created_at']}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω:</b> {account['updates_at']}\n"
    )
    await message.answer(response, parse_mode="HTML", reply_markup=get_admin_panel_keyboard())

    await state.clear()


@router.message(GetMonitorAccountByUserID.waiting_for_user_id)
async def process_get_monitor_account_by_pk(message: Message, state: FSMContext):
    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UserID (—á–∏—Å–ª–æ)")
        return

    try:
        account = await api.get_monitor_account(user_id=user_id)
    except ValueError:
        await message.answer("üì≠ –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    response = (
        f"üîπ <b>ID:</b> {account['id']}\n"
        f"üë§ <b>User ID:</b> <code>{account['user_id']}</code>\n"
        f"üÜî <b>API ID:</b> <code>{account['api_id']}</code>\n"
        f"üîë <b>API Hash:</b> <code>{account['api_hash']}</code>\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if account['is_active'] else '–ù–µ—Ç'}\n"
        f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</b> {'–î–∞' if account['is_auth'] else '–ù–µ—Ç'}\n"
        f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {account['created_at']}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω:</b> {account['updates_at']}\n"
    )
    await message.answer(response, parse_mode="HTML", reply_markup=get_admin_panel_keyboard())

    await state.clear()


# --------ADD--------
@router.message(AddMonitorAccount.waiting_for_form)
async def process_add_monitor_account(message: Message, state: FSMContext):
    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    lines = message.text.strip().split("\n")

    if len(lines) != 3:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –≤ 3 —Å—Ç—Ä–æ–∫–∏\n(User_ID, Api_ID, Api_Hash)")
        return

    user_id, api_id, api_hash = lines

    if not user_id.isdigit():
        await message.answer("‚ùå User_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        return

    if not api_id.isdigit():
        await message.answer("‚ùå Api_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        return

    # todo –≤ –ø—Ä–æ–¥–µ —É–±—Ä–∞—Ç—å \d+| —Ç–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if not re.fullmatch(r"\d+|[a-fA-F0-9]{32}", api_hash):
        await message.answer("‚ùå Api_Hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32-–∑–Ω–∞—á–Ω—ã–º —Ö—ç—à–µ–º.")
        return

    data = {
        "user_id": int(user_id),
        "api_id": int(api_id),
        "api_hash": api_hash
    }

    success = await api.create_monitor_account(data)

    if success:
        await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


# --------EDIT--------
# todo —Ç—É—Ç –≤—Å–µ –ø–µ—Ä–µ–µ–±–∞—à–∏—Ç—å –Ω–∞—Ö—É–π, –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –ø–æ–ª–Ω–∞—è

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ PK
@router.message(EditMonitorAccountByPK.waiting_for_pk)
async def process_edit_monitor_account_by_pk(message: Message, state: FSMContext):
    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    try:
        pk = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
        return

    try:
        account = await api.get_monitor_account(pk=pk)
    except ValueError:
        await message.answer("üì≠ –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    formatted_message = (
        "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω</b>\n\n"
        f"üîπ <b>ID:</b> {account['id']}\n"
        f"üë§ <b>User ID:</b> <code>{account['user_id']}</code>\n"
        f"üÜî <b>API ID:</b> <code>{account['api_id']}</code>\n"
        f"üîë <b>API Hash:</b> <code>{account['api_hash']}</code>\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if account['is_active'] else '–ù–µ—Ç'}\n"
        f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</b> {'–î–∞' if account['is_auth'] else '–ù–µ—Ç'}\n"
        f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {account['created_at']}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω:</b> {account['updates_at']}\n\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π:</b>\n"
        "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
        "<code>user_id=1234567890</code>\n"
        "<code>api_id=12345678</code>\n"
        "<code>api_hash=abcdef1234567890abcdef1234567890</code>\n"
        "<code>is_active=1</code>\n"
        "<code>is_auth=0</code>\n\n"
        "‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ–≥–æ."
    )

    await message.answer(formatted_message, parse_mode="HTML")

    await state.update_data(pk=pk)
    await state.set_state(EditMonitorAccountByPK.waiting_for_form)


@router.message(EditMonitorAccountByPK.waiting_for_form)
async def process_edit_monitor_account_by_pk_form(message: Message, state: FSMContext):
    stored_data = await state.get_data()
    pk = stored_data.get("pk")

    if not pk:
        await message.answer("‚ùå –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω 'pk'. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞", reply_markup=get_admin_panel_keyboard())
        await state.clear()
        return

    api = SeeOnlineAPI(config.SEEONLINE_API_URL)
    lines = message.text.strip().split("\n")

    valid_fields = {"user_id", "api_id", "api_hash", "is_active", "is_auth"}
    update_data = {}

    for line in lines:
        if "=" not in line:
            await message.answer(f"‚ùå –°—Ç—Ä–æ–∫–∞ '{line}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É key=value")
            return

        key, value = line.split("=", 1)
        key, value = key.strip(), value.strip()

        if key not in valid_fields:
            await message.answer(f"‚ùå –ü–æ–ª–µ '{key}' –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å")
            return

        if key in ["user_id", "api_id"]:
            if not value.isdigit():
                await message.answer(f"‚ùå {key} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                return
            update_data[key] = int(value)

        elif key == "api_hash":
            if not re.fullmatch(r"\d+|[a-fA-F0-9]{32}", value):
                await message.answer("‚ùå api_hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32-–∑–Ω–∞—á–Ω—ã–º —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º —Ö—ç—à–µ–º")
                return
            update_data[key] = value

        elif key in ["is_active", "is_auth"]:
            if value not in {"0", "1"}:
                await message.answer(f"‚ùå {key} –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ '0' (–ù–µ—Ç) –∏–ª–∏ '1' (–î–∞)")
                return
            update_data[key] = bool(int(value))

    if not update_data:
        await message.answer("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    try:
        response = await api.update_monitor_account(update_data, pk=pk)
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}", reply_markup=get_admin_panel_keyboard())
        await state.clear()
        return

    formatted_message = (
        f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω</b>\n\n"
        f"üîπ <b>ID:</b> {response['id']}\n"
        f"üë§ <b>User ID:</b> <code>{response['user_id']}</code>\n"
        f"üÜî <b>API ID:</b> <code>{response['api_id']}</code>\n"
        f"üîë <b>API Hash:</b> <code>{response['api_hash']}</code>\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if response['is_active'] else '–ù–µ—Ç'}\n"
        f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</b> {'–î–∞' if response['is_auth'] else '–ù–µ—Ç'}\n"
        f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {response['created_at']}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω:</b> {response['updates_at']}"
    )

    await message.answer(formatted_message, parse_mode="HTML", reply_markup=get_admin_panel_keyboard())

    await state.clear()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ user_id
@router.message(EditMonitorAccountByUserID.waiting_for_user_id)
async def process_edit_monitor_account_by_user_id(message: Message, state: FSMContext):
    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π User ID (—á–∏—Å–ª–æ)")
        return

    try:
        account = await api.get_monitor_account(user_id=user_id)
    except ValueError:
        await message.answer("üì≠ –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º user_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    formatted_message = (
        "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω</b>\n\n"
        f"üîπ <b>ID:</b> {account['id']}\n"
        f"üë§ <b>User ID:</b> <code>{account['user_id']}</code>\n"
        f"üÜî <b>API ID:</b> <code>{account['api_id']}</code>\n"
        f"üîë <b>API Hash:</b> <code>{account['api_hash']}</code>\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if account['is_active'] else '–ù–µ—Ç'}\n"
        f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</b> {'–î–∞' if account['is_auth'] else '–ù–µ—Ç'}\n"
        f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {account['created_at']}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω:</b> {account['updates_at']}\n\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π:</b>\n"
        "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
        "<code>user_id=1234567890</code>\n"
        "<code>api_id=12345678</code>\n"
        "<code>api_hash=abcdef1234567890abcdef1234567890</code>\n"
        "<code>is_active=1</code>\n"
        "<code>is_auth=0</code>\n\n"
        "‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ–≥–æ"
    )
    await message.answer(formatted_message, parse_mode="HTML")

    await state.update_data(user_id=user_id)

    await state.set_state(EditMonitorAccountByUserID.waiting_for_form)


@router.message(EditMonitorAccountByUserID.waiting_for_form)
async def process_edit_monitor_account_by_user_id_form(message: Message, state: FSMContext):
    stored_data = await state.get_data()
    user_id = stored_data.get("user_id")

    if not user_id:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        await state.clear()
        return

    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    lines = message.text.strip().split("\n")

    valid_fields = {"user_id", "api_id", "api_hash", "is_active", "is_auth"}
    update_data = {}

    for line in lines:
        if "=" not in line:
            await message.answer(f"‚ùå –°—Ç—Ä–æ–∫–∞ '{line}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É key=value")
            return

        key, value = line.split("=", 1)
        key, value = key.strip(), value.strip()

        if key not in valid_fields:
            await message.answer(f"‚ùå –ü–æ–ª–µ '{key}' –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å")
            return

        if key in ["user_id", "api_id"]:
            if not value.isdigit():
                await message.answer(f"‚ùå {key} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                return
            update_data[key] = int(value)

        elif key == "api_hash":
            if not re.fullmatch(r"\d+|[a-fA-F0-9]{32}", value):
                await message.answer("‚ùå api_hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32-–∑–Ω–∞—á–Ω—ã–º —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º —Ö—ç—à–µ–º")
                return
            update_data[key] = value

        elif key in ["is_active", "is_auth"]:
            if value not in {"0", "1"}:
                await message.answer(f"‚ùå {key} –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ '0' (–ù–µ—Ç) –∏–ª–∏ '1' (–î–∞)")
                return
            update_data[key] = bool(int(value))

    if not update_data:
        await message.answer("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    try:
        response = await api.update_monitor_account(update_data, pk=None, user_id=user_id)
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}", reply_markup=get_admin_panel_keyboard())
        await state.clear()
        return

    formatted_message = (
        f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω</b>\n\n"
        f"üîπ <b>ID:</b> {response['id']}\n"
        f"üë§ <b>User ID:</b> <code>{response['user_id']}</code>\n"
        f"üÜî <b>API ID:</b> <code>{response['api_id']}</code>\n"
        f"üîë <b>API Hash:</b> <code>{response['api_hash']}</code>\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if response['is_active'] else '–ù–µ—Ç'}\n"
        f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</b> {'–î–∞' if response['is_auth'] else '–ù–µ—Ç'}\n"
        f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {response['created_at']}\n"
        f"üîÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω:</b> {response['updates_at']}"
    )

    await message.answer(formatted_message, parse_mode="HTML", reply_markup=get_admin_panel_keyboard())
    await state.clear()


# --------DELETE--------

@router.message(DeleteMonitorAccountByPK.waiting_for_pk)
async def process_delete_monitor_account_by_pk(message: Message, state: FSMContext):
    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    try:
        pk = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
        return

    try:
        await api.delete_monitor_account(pk=pk)
    except ValueError:
        await message.answer("üì≠ –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω", parse_mode="HTML", reply_markup=get_admin_panel_keyboard())

    await state.clear()


@router.message(DeleteMonitorAccountByUserID.waiting_for_user_id)
async def process_delete_monitor_account_by_user_id(message: Message, state: FSMContext):
    api = SeeOnlineAPI(config.SEEONLINE_API_URL)

    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UserID (—á–∏—Å–ª–æ)")
        return

    try:
        await api.delete_monitor_account(user_id=user_id)
    except ValueError:
        await message.answer("üì≠ –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω", parse_mode="HTML", reply_markup=get_admin_panel_keyboard())

    await state.clear()


# --------AUTH--------

# todo –ø–µ—Ä–µ–ø–∏–ª–∏—Ç—å –µ–±–∞–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é

@router.message(AuthMonitorAccountByPK.waiting_for_pk)
async def process_auth_monitor_account_by_pk(message: Message, state: FSMContext):
    pass
    # api = SeeOnlineAPI(config.SEEONLINE_API_URL)
    #
    # try:
    #     pk = int(message.text)
    # except ValueError:
    #     await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
    #     return
    #
    # try:
    #     auth_data = await api.start_auth_monitor_account(pk=pk)
    # except ValueError as e:
    #     await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {e}", reply_markup=get_admin_panel_keyboard())
    #     await state.clear()
    #     return
    #
    # await state.update_data(
    #     phone_number=auth_data["phone_number"],
    #     phone_code_hash=auth_data["phone_code_hash"],
    #     api_id=auth_data["api_id"],
    #     api_hash=auth_data["api_hash"],
    #     monitor_id=auth_data["monitor_id"]
    # )
    #
    # await message.answer(
    #     f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä <b>{auth_data['phone_number']}</b>\n"
    #     f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram/SMS:",
    #     parse_mode="HTML"
    # )
    #
    # await state.set_state(AuthMonitorAccountByPK.waiting_for_code)


# todo –¥–æ–ø–∏–ª–∏—Ç—å –±–ª—è—Ç—å –∑–∞–µ–±–∞–ª–∏

@router.message(AuthMonitorAccountByPK.waiting_for_code)
async def process_auth_monitor_account_by_pk_code(message: Message, state: FSMContext):
    pass
    # api = SeeOnlineAPI(config.SEEONLINE_API_URL)
    # code = message.text.strip()
    #
    # data = await state.get_data()
    #
    # phone_number = data.get("phone_number")
    # phone_code_hash = data.get("phone_code_hash")
    # api_id = data.get("api_id")
    # api_hash = data.get("api_hash")
    # monitor_id = data.get("monitor_id")
    # temp_sesion = data.get("temp_sesion")
    #
    # if not all([phone_number, phone_code_hash, api_id, api_hash, monitor_id]):
    #     await message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞",
    #                          reply_markup=get_admin_panel_keyboard())
    #     await state.clear()
    #     return
    #
    # try:
    #     session_str = await api.complete_auth_monitor_account(
    #         code=code,
    #         phone_number=phone_number,
    #         phone_code_hash=phone_code_hash,
    #         api_id=api_id,
    #         api_hash=api_hash,
    #         monitor_id=monitor_id,
    #         temp_session=temp_sesion
    #     )
    # except ValueError as e:
    #     await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", reply_markup=get_admin_panel_keyboard())
    #     await state.clear()
    #     return
    #
    # await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!\n {session_str}", reply_markup=get_admin_panel_keyboard())
    #
    # await state.clear()
