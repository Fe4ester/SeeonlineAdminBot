from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from config import load_config
from services.countries import countries
from services.smsbower_api import SmsBowerAPI

router = Router()
config = load_config()


def parse_named_params(args: list, defaults: dict) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤–∏–¥–∞ key:value –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏,
    –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ defaults.
    """
    params = defaults.copy()
    for arg in args:
        if ':' in arg:
            key, value = arg.split(":", 1)
            key = key.lower().strip()
            value = value.strip()
            if key in params:
                params[key] = value
    return params


def format_api_error(e: Exception) -> str:
    return f"–û—à–∏–±–∫–∞: {e}\n"


@router.message(Command('get_prices'))
async def cmd_get_prices(message: Message):
    args = message.text.split()[1:]
    defaults = {
        "v": "1",
        "c": None,
        "mp": "40",
        "mc": "5"
    }
    params = parse_named_params(args, defaults)

    try:
        version = int(params["v"])
        country = int(params["c"]) if params["c"] is not None else None
        max_price = float(params["mp"])
        min_count = int(params["mc"])
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /get_prices v:1 c:31 mp:30 mc:10"
        )
        return

    api = SmsBowerAPI(config.SMSBOWER_API_URL)
    try:
        data = await api.get_prices(
            config.SMSBOWER_TOKEN,
            country=country,
            version=version,
            max_price=max_price,
            min_count=min_count
        )
    except ValueError as e:
        await message.answer(format_api_error(e))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
    if version == 1:
        result = []
        for country_id, details in data.items():
            country_name = countries.get(int(country_id), "Unknown Country")
            cost = details["tg"]["cost"]
            count = details["tg"]["count"]
            result.append(
                f"üåç <b>{country_name}</b> ({country_id}):\n"
                f"üí∞ {cost} —Ä—É–±. ‚Äî üì¶ {count} —à—Ç."
            )
        prices_message = "\n\n".join(result)
        await message.answer(prices_message, parse_mode="HTML")

    elif version == 2:
        result = []
        for country_id, details in data.items():
            country_name = countries.get(int(country_id), "Unknown Country")
            prices_list = details["tg"]

            if len(prices_list) == 1:
                # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Ü–µ–Ω—ã
                price, count = next(iter(prices_list.items()))
                result.append(
                    f"üåç <b>{country_name}</b> ({country_id}):\n"
                    f"üí∞ {price} —Ä—É–±. ‚Äî üì¶ {count} —à—Ç."
                )
            else:
                # –ï—Å–ª–∏ —Ü–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ
                prices_block = "\n".join(
                    f"    üí∞ {price} —Ä—É–±. ‚Äî üì¶ {count} —à—Ç."
                    for price, count in prices_list.items()
                )
                result.append(f"üåç <b>{country_name}</b> ({country_id}):\n{prices_block}")
        prices_message = "\n\n".join(result)
        await message.answer(prices_message, parse_mode="HTML")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ v:1 –∏–ª–∏ v:2.")


@router.message(Command('get_number'))
async def cmd_get_number(message: Message):
    args = message.text.split()[1:]
    defaults = {"mp": "40", "c": "31", "pids": None, "excpids": None}
    params = parse_named_params(args, defaults)

    try:
        max_price = float(params["mp"])
        country = int(params["c"])
        provider_ids = params["pids"]
        except_provider_ids = params["excpids"]
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /get_number mp:40 c:31 pids:1,2 excpids:3"
        )
        return

    api = SmsBowerAPI(config.SMSBOWER_API_URL)
    try:
        data = await api.get_number(
            config.SMSBOWER_TOKEN,
            max_price=max_price,
            country=country,
            provider_ids=provider_ids,
            except_provider_ids=except_provider_ids
        )
    except ValueError as e:
        await message.answer(format_api_error(e))
        return

    country_name = countries.get(int(data["countryCode"]), "Unknown Country")
    activation_cost = data["activationCost"]
    activation_id = data["activationId"]
    phone_number = data["phoneNumber"]
    activation_time = data["activationTime"]
    can_get_sms = "‚úÖ –î–∞" if data["canGetAnotherSms"] == "1" else "‚ùå –ù–µ—Ç"

    formatted_message = (
        f"üì≤ <b>–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name} ({data['countryCode']})\n"
        f"üìû –ù–æ–º–µ—Ä: <code>{phone_number}</code>\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {activation_cost} —Ä—É–±.\n"
        f"‚è≥ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_time}\n"
        f"üì© –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ SMS: {can_get_sms}\n"
        f"üÜî ID –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <code>{activation_id}</code>"
    )
    await message.answer(formatted_message, parse_mode="HTML")


@router.message(Command('get_sms'))
async def cmd_get_sms(message: Message):
    args = message.text.split()[1:]
    if not args:
        await message.answer("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä activation_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return

    activation_id = args[0]
    api = SmsBowerAPI(config.SMSBOWER_API_URL)

    try:
        data = await api.get_sms(config.SMSBOWER_TOKEN, activation_id)
    except ValueError as e:
        await message.answer(format_api_error(e))
        return

    await message.answer(data)


@router.message(Command('set_status'))
async def cmd_set_status(message: Message):
    args = message.text.split()[1:]
    if not args:
        await message.answer(
            "‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä activation_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "  aid ‚Äì activation_id\n"
            "  s ‚Äì status (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1, 3, 6, 8)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, —É–∫–∞–∑–∞–≤ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )
        return

    defaults = {"aid": None, "s": None}
    params = parse_named_params(args, defaults)

    if not params["aid"]:
        await message.answer(
            "‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä activation_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "  aid ‚Äì activation_id\n"
            "  s ‚Äì status (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1, 3, 6, 8)\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return

    if not params["s"]:
        await message.answer(
            "‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä status –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "  aid ‚Äì activation_id\n"
            "  s ‚Äì status (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1, 3, 6, 8)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, —É–∫–∞–∑–∞–≤ –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞."
        )
        return

    allowed_statuses = {"1", "3", "6", "8"}
    if params["s"] not in allowed_statuses:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ status!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "  aid ‚Äì activation_id\n"
            "  s ‚Äì —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1, 3, 6, 8)\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è status."
        )
        return

    api = SmsBowerAPI(config.SMSBOWER_API_URL)
    try:
        result = await api.set_status(config.SMSBOWER_TOKEN, params["aid"], params["s"])
        await message.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {result}", parse_mode="HTML")
    except Exception as e:
        await message.answer(format_api_error(e), parse_mode="HTML")


@router.message(Command('get_balance'))
async def cmd_get_balance(message: Message):
    api = SmsBowerAPI(config.SMSBOWER_API_URL)
    try:
        balance = await api.get_balance(config.SMSBOWER_TOKEN)
    except ValueError as e:
        await message.answer(format_api_error(e))
        return

    formatted_message = (
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n"
        f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance} —Ä—É–±.</b>\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
    )
    await message.answer(formatted_message, parse_mode="HTML")


@router.message(Command('smsbower'))
async def cmd_smsbower(message: Message):
    api = SmsBowerAPI(config.SMSBOWER_API_URL)
    balance = await api.get_balance(config.SMSBOWER_TOKEN)

    formatted_message = (
        f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance} —Ä—É–±.</code>\n\n"
        f"üì¢ –£–¥–∞—á–∏ –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–π –µ–±–∞–Ω–æ–π –∫–æ–ª—ã–º–∞–≥–µ\n\n"
        f"üìú <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        f"üí∞ /get_balance ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        f"üìä /get_prices ‚Äî –õ–∏—Å—Ç —Ü–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ /smsbower_docs)\n"
        f"üìû /get_number ‚Äî –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä (‚ö†Ô∏è –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å!)\n"
        f"üì© /get_sms ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–º—Å (–ø–µ—Ä–µ–¥–∞–µ–º activation_id)\n"
        f"üîß /set_status ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: aid, s)\n\n"
        f"üìÑ /smsbower_docs ‚Äî –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å API"
    )

    await message.answer(formatted_message, parse_mode="HTML")


@router.message(Command('smsbower_docs'))
async def cmd_smsbower_docs(message: Message):
    docs_message = (
        "<b>üìú –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è SmsBower API</b>\n\n"
        "<b>üîç –û–±–∑–æ—Ä:</b>\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ API —Å–µ—Ä–≤–∏—Å–∞ <b>SmsBower</b>, –ø–æ–∑–≤–æ–ª—è—è:\n"
        "‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "‚úÖ –ü–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω\n"
        "‚úÖ –ü–æ–∫—É–ø–∞—Ç—å –Ω–æ–º–µ—Ä–∞\n"
        "‚úÖ –ü–æ–ª—É—á–∞—Ç—å –°–ú–°-–∫–æ–¥—ã\n"
        "‚úÖ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n"
        "<b>‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "üîπ <b>/get_balance</b> ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n"
        "   üìå –ü—Ä–∏–º–µ—Ä: <code>/get_balance</code>\n\n"
        "üîπ <b>/get_prices</b> ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ 'tg'.\n"
        "   üîß <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "   - <code>v</code>: –≤–µ—Ä—Å–∏—è API (1 –∏–ª–∏ 2). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.\n"
        "   - <code>c</code>: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "   - <code>mp</code>: –º–∞–∫—Å. —Ü–µ–Ω–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 40.\n"
        "   - <code>mc</code>: –º–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5.\n"
        "   üìå –ü—Ä–∏–º–µ—Ä: <code>/get_prices v:1 c:31 mp:30 mc:10</code>\n\n"
        "üîπ <b>/get_number</b> ‚Äî –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
        "   üîß <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "   - <code>mp</code>: –º–∞–∫—Å. —Ü–µ–Ω–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 40.\n"
        "   - <code>c</code>: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 31.\n"
        "   - <code>pids</code>: –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).\n"
        "   - <code>excpids</code>: –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).\n"
        "   üìå –ü—Ä–∏–º–µ—Ä: <code>/get_number mp:40 c:31 pids:1,2 excpids:3</code>\n\n"
        "üîπ <b>/get_sms</b> ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –°–ú–°-–∫–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É.\n"
        "   üîß <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "   - <code>activation_id</code>: ID –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
        "   üìå –ü—Ä–∏–º–µ—Ä: <code>/get_sms 123456</code>\n\n"
        "üîπ <b>/set_status</b> ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
        "   üîß <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "   - <code>aid</code>: ID –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
        "   - <code>s</code>: —Å—Ç–∞—Ç—É—Å (1, 3, 6, 8 ‚Äî —Å–º. –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏–∂–µ).\n"
        "   üìå –ü—Ä–∏–º–µ—Ä: <code>/set_status aid:123456 s:6</code>\n\n"
        "<b>üìå –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b>\n"
        "üîπ <b>1</b> ‚Äî <i>SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</i> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞).\n"
        "üîπ <b>3</b> ‚Äî <i>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ SMS</i> (–µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω).\n"
        "üîπ <b>6</b> ‚Äî <i>–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é</i> (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å).\n"
        "üîπ <b>8</b> ‚Äî <i>–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</i> (–µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥–æ—à–µ–ª –∏–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏).\n\n"
        "<b>üìä –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Ä–∞–±–æ—Ç—ã —Å API:</b>\n"
        "1Ô∏è‚É£ <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞:</b>\n"
        "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/get_number</code>.\n"
        "   - –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥–æ—à–µ–ª, –æ—Ç–º–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é (<code>/set_status aid:XXX s:8</code>).\n\n"
        "2Ô∏è‚É£ <b>–û–∂–∏–¥–∞–Ω–∏–µ SMS:</b>\n"
        "   - –ú–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (<code>/set_status aid:XXX s:1</code>), –Ω–æ —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.\n"
        "   - –ï—Å–ª–∏ SMS –Ω–µ –ø—Ä–∏—à–ª–∞, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é (<code>/set_status aid:XXX s:3</code>).\n\n"
        "3Ô∏è‚É£ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n"
        "   - –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é (<code>/set_status aid:XXX s:6</code>).\n"
        "   - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é (<code>/set_status aid:XXX s:8</code>).\n\n"
        "<b>üìå –í–∞–∂–Ω–æ:</b>\n"
        "‚ö†Ô∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n"
        "‚ö†Ô∏è –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –≤–∞–º –æ–± —ç—Ç–æ–º.\n"
        "‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–π API-–∫–ª—é—á.\n\n"
        "üìç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>/smsbower</b>.\n"
        "‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @Fe4ester"
    )
    await message.answer(docs_message, parse_mode="HTML")
